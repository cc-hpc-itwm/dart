#!/usr/bin/env python3

#usage: python create_json_nodefile.py <machinefile> <number of workers per machine>
import os 
dir_path = os.path.dirname(os.path.realpath(__file__))

import sys
import json
import os
import subprocess
import _ports as ports


def print_help():
    print ("Please specify the machinefile and optionally the number of workers per machine as command line arguments! If the latter isn't given the number of workers will match the number of GPUs on this machine! args: <path_nodefile> [<number_of_workers_per_node>]")

if len (sys.argv) < 2 or sys.argv[1].isdigit():
    print_help()
    sys.exit()

JOBID = os.environ['SLURM_JOBID']
USER = os.environ['USER']
HOME = os.environ['HOME']

if len(sys.argv) == 3:
    num_devices = sys.argv[2]
else:
    num_devices = max(1, len([i for i in os.environ.get("CUDA_VISIBLE_DEVICES").split(",")]))

sshdir=HOME+"/.local/share/carme/job/"+JOBID+"/ssh"
ssh_config_path = sshdir+"/ssh_config"

#subprocess.Popen(['bash', '-c', "touch "+ssh_config_path+";. "+ dir_path + "/create-ssh-config.sh"])

nodefile_path = sys.argv[1]
print("Number of devices per node: " + str(num_devices))
print("Write to nodefile: " + nodefile_path)


ports = ports.get_port_dictionary(ssh_config_path)

count = 0
worker_dic = {}
for port, hosts in ports.items():
    paras = {}
    paras["capabilities"] = ["local_cluster" + str(count)]
    paras["num_per_node"] = num_devices
    paras["shm_size"] = 0
    paras["port"] = port
    paras["hosts"] = hosts
    worker_dic["worker"+str(count)] = paras
    count = count + 1


with open (nodefile_path, 'w') as outfile:
    json.dump(worker_dic, outfile)
