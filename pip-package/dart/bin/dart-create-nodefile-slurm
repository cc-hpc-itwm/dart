#!/usr/bin/env python3

#usage: python create_json_nodefile.py <machinefile> <number of workers per machine>

import sys
import json
import os
import subprocess
import socket
import re

def print_help():
    print ("Please specify the machinefile and optionally the number of workers per machine as command line arguments! If the latter isn't given the number of workers will match the number of GPUs on this machine! args: <path_nodefile> [<number_of_workers_per_node>]")

def run_command(cmd):
    """Run command, return output as string."""
    output = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True).communicate()[0]
    return output.decode("ascii")


if len (sys.argv) < 2 or sys.argv[1].isdigit():
    print_help()
    sys.exit()

if len(sys.argv) == 3:
    num_devices = sys.argv[2]
else:
    if os.environ.get('CUDA_VISIBLE_DEVICES') is not None:
	    num_devices = max(1, len([i for i in os.environ.get("CUDA_VISIBLE_DEVICES").split(",")]))
    else:
        hostname = socket.gethostname()
        num_devices = int(run_command("scontrol show node "+hostname+" | grep CPUAlloc | awk '{print $1}' | cut -d'=' -f2"))



nodefile_path = sys.argv[1]
print("Number of devices per node: " + str(num_devices))
print("Write to nodefile: " + nodefile_path)

hosts = run_command("scontrol show hostnames")
if hosts == '':
    node_list = run_command("squeue -u kruegerj -t R -w "+hostname+" -O nodelist | sed -n 2p")
    a = node_list.split("node")[1]
    a = a.replace('[', '')
    a = a.replace(']', '')
    a = a.split(',')
    a = [re.sub('\W+','',x) for x in a]
    hosts = ["node" + s for s in a]
else:
    hosts = [y for y in (x.strip() for x in hosts.splitlines()) if y]

paras = {}
worker_dic = {}

paras["capabilities"] = ["slurm_cluster"]
paras["num_per_node"] = num_devices
paras["shm_size"] = 0
paras["port"] = "22"
paras["hosts"] = hosts 
worker_dic["worker"] = paras

with open (nodefile_path, 'w') as outfile:
    json.dump(worker_dic, outfile)
